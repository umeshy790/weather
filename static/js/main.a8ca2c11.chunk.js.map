{"version":3,"sources":["theming/Theme.js","components/WeatherHeader.js","service/Service.js","components/Home.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["themes","light","background","color","dark","boxShadow","containerLight","containerDark","ThemeContext","React","createContext","mode","toggleButton","WeatherHeader","props","themeContext","useContext","className","onClick","url","a","fetch","response","ok","json","Home","useState","cd","list","cityWiseWeather","weatherUpdates","useEffect","getWeatherUpdates","then","weatherUpdate","catch","err","console","error","Fragment","map","value","index","key","toString","style","name","viewBox","fill","d","fontSize","main","temp","toFixed","weather","display","flexDirection","temp_min","marginTop","temp_max","Container","App","state","changeTheme","Theme","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAEaA,G,MAAS,CACpBC,MAAO,CACLC,WAAY,4GACZC,MAAO,WAETC,KAAM,CACJF,WAAY,gBACZC,MAAO,UACPE,UAAW,4BAEbC,eAAgB,CACdH,MAAO,UACPD,WAAY,UACZG,UAAW,wCAEbE,cAAe,CACbL,WAAY,gBACZC,MAAO,UACPE,UAAW,8BAMAG,EAFMC,IAAMC,cAAc,CAAEC,KAAM,QAASC,aAAc,e,MCRzDC,MAZf,SAAuBC,GACrB,IAAMC,EAAeC,qBAAWR,GAEhC,OACE,yBAAKS,UAAU,WACb,4BAAQA,UAAU,MAAMC,QAASH,EAAaH,cAA9C,kB,2ECTC,WAAiCO,GAAjC,eAAAC,EAAA,sEACgBC,MAAMF,GADtB,YACDG,EADC,QAEQC,GAFR,yCAGID,EAASE,QAHb,4C,sBCiDQC,MA5Cf,WAAiB,IAAD,EAC4BC,mBAAS,CAAEC,GAAI,EAAGC,KAAM,KADpD,mBACPC,EADO,KACUC,EADV,KAERf,EAAeC,qBAAWR,GAOhC,OANAuB,qBAAU,YDRL,SAAP,mCCSIC,CAAkB,2HACfC,MAAK,SAAAC,GAAa,OAAIJ,EAAeI,MACrCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAC7B,IAGD,kBAAC,IAAMG,SAAP,KACE,yBAAKtB,UAAU,QACZY,EAAgBD,KAAKY,KAAI,SAACC,EAAOC,GAAR,OACxB,yBAAKC,IAAKD,EAAME,WAAY3B,UAAU,YAAY4B,MAA6B,UAAtB9B,EAAaJ,KAAmBX,EAAOM,eAAiBN,EAAOO,eACtH,0BAAMU,UAAU,SAASwB,EAAMK,MAE/B,yBAAK7B,UAAU,WAAW8B,QAAQ,aAChC,0BACEC,KAAK,OACLC,EAAE,mnCAGN,yBAAKhC,UAAU,eACb,yBAAK4B,MAAO,CAAEK,SAAU,UAAYT,EAAMU,KAAKC,KAAO,KAAKC,QAAQ,IACnE,yBAAKR,MAAO,CAAEK,SAAU,WAAaT,EAAMa,QAAQ,GAAGH,OAGxD,yBAAKlC,UAAU,oBACb,yBAAK4B,MAAO,CAAEU,QAAS,OAAQC,cAAe,WAC5C,+BAAQf,EAAMU,KAAKM,SAAW,KAAKJ,QAAQ,IAC3C,0BAAMR,MAAO,CAAEK,SAAU,SAAUQ,UAAW,QAA9C,QAEF,yBAAKb,MAAO,CAAEU,QAAS,OAAQC,cAAe,WAC5C,mCAASf,EAAMU,KAAKQ,SAAW,KAAKN,QAAQ,IAC5C,0BAAMR,MAAO,CAAEK,SAAU,SAAUQ,UAAW,QAA9C,gBCtBDE,MAXf,WACE,IAAM7C,EAAeC,qBAAWR,GAEhC,OACE,yBAAKS,UAAU,iBAAiB4B,MAA6B,UAAtB9B,EAAaJ,KAAmBX,EAAOC,MAAQD,EAAOI,MAC3F,kBAAC,EAAD,MACA,kBAAC,EAAD,QCYSyD,MApBf,WAAgB,IAAD,EACgBnC,mBAAS,CAAEf,KAAM,QAASC,aAAc,eADxD,mBACNkD,EADM,KACCC,EADD,KAab,OAVAD,EAAMlD,aAAe,WACA,UAAfkD,EAAMnD,MACRoD,EAAY,CAAEpD,KAAM,OAAQC,aAAc,eAGzB,SAAfkD,EAAMnD,MACRoD,EAAY,CAAEpD,KAAM,QAASC,aAAc,gBAK7C,kBAACoD,EAAaC,SAAd,CAAuBxB,MAAOqB,GAC5B,kBAAC,EAAD,QCPcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.a8ca2c11.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const themes = {\n  light: {\n    background: \"linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(28,18,97,1) 0%, rgba(199,188,205,0.9332107843137255) 100%)\",\n    color: \"#FFFFFF\"\n  },\n  dark: {\n    background: \"rgb(2, 0, 36)\",\n    color: \"#FFFFFF\",\n    boxShadow: \"0px 0px 10px 4px #FFFFFF\"\n  },\n  containerLight: {\n    color: \"#000000\",\n    background: \"#FFFFFF\",\n    boxShadow: \"0px 0px 10px 3px rgba(20,20,36,0.42)\"\n  },\n  containerDark: {\n    background: \"rgb(2, 0, 36)\",\n    color: \"#FFFFFF\",\n    boxShadow: \"0px 0px 10px 3px #FFFFFF\"\n  }\n};\n\nconst ThemeContext = React.createContext({ mode: \"light\", toggleButton: () => {} });\n\nexport default ThemeContext;\n","import React, { useContext } from \"react\";\nimport \"./WeatherHeader.css\";\nimport ThemeContext from \"../theming/Theme\";\n\nfunction WeatherHeader(props) {\n  const themeContext = useContext(ThemeContext);\n  \n  return (\n    <div className=\"wrapper\">\n      <button className=\"btn\" onClick={themeContext.toggleButton}>\n        Change Theme\n      </button>\n    </div>\n  );\n}\n\nexport default WeatherHeader;\n","export async function getWeatherUpdates(url) {\n  let response = await fetch(url);\n  if (response.ok) {\n    return response.json();\n  }\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"./Home.css\";\nimport { getWeatherUpdates } from \"../service/Service\";\nimport ThemeContext, { themes } from \"../theming/Theme\";\n\nfunction Home() {\n  const [cityWiseWeather, weatherUpdates] = useState({ cd: 0, list: [] });\n  const themeContext = useContext(ThemeContext);\n  useEffect(() => {\n    getWeatherUpdates(\"https://api.openweathermap.org/data/2.5/group?id=1273294,1275339,1275004,1264527&appid=c66d22c190d88257f7e9fa5ff4c3950e\")\n      .then(weatherUpdate => weatherUpdates(weatherUpdate))\n      .catch(err => console.error(err));\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"body\">\n        {cityWiseWeather.list.map((value, index) => (\n          <div key={index.toString()} className=\"container\" style={themeContext.mode === \"light\" ? themes.containerLight : themes.containerDark}>\n            <span className=\"title\">{value.name}</span>\n            {/* <img src=\"http://openweathermap.org/img/w/01d.png\" /> */}\n            <svg className=\"svg-icon\" viewBox=\"0 0 20 20\">\n              <path\n                fill=\"none\"\n                d=\"M2.568,7.179H8.96c1.411,0,2.557-1.145,2.557-2.557c0-1.412-1.146-2.557-2.557-2.557H8.534c-0.235,0-0.426,0.19-0.426,0.426c0,0.236,0.191,0.426,0.426,0.426H8.96c0.941,0,1.704,0.763,1.704,1.705S9.901,6.327,8.96,6.327H2.568c-0.236,0-0.426,0.19-0.426,0.426C2.142,6.988,2.333,7.179,2.568,7.179 M15.778,7.179c0-0.941-0.763-1.704-1.704-1.704h-0.427c-0.235,0-0.426,0.19-0.426,0.426c0,0.235,0.19,0.426,0.426,0.426h0.427c0.47,0,0.852,0.382,0.852,0.852c0,0.471-0.382,0.853-0.852,0.853H0.864c-0.236,0-0.426,0.19-0.426,0.426c0,0.235,0.19,0.426,0.426,0.426h13.21C15.016,8.884,15.778,8.12,15.778,7.179 M16.631,9.736H2.568c-0.236,0-0.426,0.19-0.426,0.426c0,0.236,0.19,0.426,0.426,0.426h14.062c0.94,0,1.704,0.764,1.704,1.705s-0.764,1.704-1.704,1.704h-0.427c-0.235,0-0.426,0.19-0.426,0.427c0,0.235,0.19,0.426,0.426,0.426h0.427c1.411,0,2.557-1.145,2.557-2.557S18.042,9.736,16.631,9.736 M10.665,11.44H4.273c-0.236,0-0.426,0.19-0.426,0.426c0,0.236,0.19,0.427,0.426,0.427h6.392c1.412,0,2.557,1.145,2.557,2.557s-1.146,2.557-2.557,2.557h-0.426c-0.236,0-0.426,0.19-0.426,0.426s0.19,0.427,0.426,0.427h0.426c1.883,0,3.41-1.526,3.41-3.409S12.548,11.44,10.665,11.44\"\n              ></path>\n            </svg>\n            <div className=\"description\">\n              <div style={{ fontSize: \"3rem\" }}>{(value.main.temp - 273).toFixed(2)}</div>\n              <div style={{ fontSize: \"1.5rem\" }}>{value.weather[0].main}</div>\n            </div>\n\n            <div className=\"temp-description\">\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <span>{(value.main.temp_min - 273).toFixed(2)}</span>\n                <span style={{ fontSize: \"0.9rem\", marginTop: \"5px\" }}>Min</span>\n              </div>\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <span> {(value.main.temp_max - 273).toFixed(2)}</span>\n                <span style={{ fontSize: \"0.9rem\", marginTop: \"5px\" }}>Max</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport \"./Container.css\";\nimport ThemeContext, { themes } from \"../theming/Theme\";\nimport WeatherHeader from \"./WeatherHeader\";\nimport Home from \"./Home\";\n\nfunction Container() {\n  const themeContext = useContext(ThemeContext);\n\n  return (\n    <div className=\"Main-container\" style={themeContext.mode === \"light\" ? themes.light : themes.dark}>\n      <WeatherHeader></WeatherHeader>\n      <Home />\n    </div>\n  );\n}\n\nexport default Container;\n","import React, { useState } from \"react\";\nimport Container from \"./components/Container\";\nimport ThemeContext, { themes } from \"./theming/Theme\";\n\nfunction App() {\n  const [state, changeTheme] = useState({ mode: \"light\", toggleButton: () => {} });\n\n  state.toggleButton = () => {\n    if (state.mode === \"light\") {\n      changeTheme({ mode: \"dark\", toggleButton: () => {} });\n    }\n\n    if (state.mode === \"dark\") {\n      changeTheme({ mode: \"light\", toggleButton: () => {} });\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={state}>\n      <Container></Container>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}